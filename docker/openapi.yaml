openapi: 3.0.3

info:
  title: Schema Validator
  version: 1.0.11
  description: |-
    REST-service for validating JSON documents against JSON Schemas.

    Allows users to upload JSON Schemas and store them at unique URI and then validate JSON documents against these URIs.

    Additionally, this service will "clean" every JSON document before validation: remove keys for which the value is null.

servers:
  - url: http://0.0.0.0:9090
  - url: http://schema-validator:9090

tags:
  - name: Health
  - name: Schemas
  - name: Documents

paths:
  /health:
    get:
      tags:
        - Health
      responses:
        '200':
          description: Service is healty

  /schema/{schema_id}:
    post:
      tags:
        - Schemas
      summary: Upload a Schema
      description: Upload a JSON Schema with unique `SCHEMAID`
      operationId: uploadSchema
      parameters:
        - name: schema_id
          in: path
          description: Schema ID
          required: true
          schema:
            type: string
            default: "schema_id"
          example: "1"

      requestBody:
        description: Schema to be uploaded
        content:
          application/json:
            schema:
              type: object
            example:
                {
                  "$schema": "http://json-schema.org/draft-04/schema#",
                  "type": "object",
                  "properties": {
                    "source": {
                      "type": "string"
                    },
                    "destination": {
                      "type": "string"
                    },
                    "timeout": {
                      "type": "integer",
                      "minimum": 0,
                      "maximum": 32767
                    },
                    "chunks": {
                      "type": "object",
                      "properties": {
                        "size": {
                          "type": "integer"
                        },
                        "number": {
                          "type": "integer"
                        }
                      },
                      "required": ["size"]
                    }
                  },
                  "required": ["source", "destination"]
                }

      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
              example:
                {
                  "action": "upload",
                  "id": "schema_id",
                  "status": "success"
                }
        '400':
          description: Invalid JSON body request
          content:
            application/json:
              schema:
                type: object
              example:
                {
                  "action": "upload",
                  "id": "schema_id",
                  "status": "error",
                  "message": "Invalid JSON"
                }
    get:
      tags:
        - Schemas
      summary: Download a Schema
      description: Download a JSON Schema with unique `SCHEMAID`
      operationId: downloadSchema

      parameters:
        - name: schema_id
          in: path
          description: Schema ID
          required: true
          schema:
            type: string
            default: "schema_id"
          example: "1"

      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
              example:
                {
                  "$schema": "http://json-schema.org/draft-04/schema#",
                  "type": "object",
                  "properties": {
                    "source": {
                      "type": "string"
                    },
                    "destination": {
                      "type": "string"
                    },
                    "timeout": {
                      "type": "integer",
                      "minimum": 0,
                      "maximum": 32767
                    },
                    "chunks": {
                      "type": "object",
                      "properties": {
                        "size": {
                          "type": "integer"
                        },
                        "number": {
                          "type": "integer"
                        }
                      },
                      "required": ["size"]
                    }
                  },
                  "required": ["source", "destination"]
                }

        '404':
          description: Schema not found

  /validate/{schema_id}:
    post:
      tags:
        - Documents
      summary: Validate a Documents against a Schema
      description: Validate a JSON document against the JSON Schema identified by `SCHEMAID`
      operationId: validateSchema

      parameters:
        - name: schema_id
          in: path
          description: Schema ID
          required: true
          schema:
            type: string
            default: "schema_id"
          example: "1"

      requestBody:
        description: Document to be validated
        required: true
        content:
          application/json:
            schema:
              type: object
            example:
              {
                "source": "/home/alice/image.iso",
                "destination": "/mnt/storage",
                "timeout": null,
                "chunks": {
                  "size": 1024,
                  "number": null
                }
              }

      responses:
        '200':
            description: Successful operation
            content:
              application/json:
                schema:
                  type: object
                example:
                  {
                    "action": "validate",
                    "id": "schema_id",
                    "status": "success"
                  }

        '204':
            description: Failed operation (Actual Status `200`)
            content:
              application/json:
                schema:
                  type: object
                example:
                  {
                    "action": "validate",
                    "id": "schema_id",
                    "status": "error",
                    "message": "{error-message}"
                  }

        '400':
          description: Invalid JSON body request
          content:
            application/json:
              schema:
                type: object
              example:
                {
                  "action": "upload",
                  "id": "schema_id",
                  "status": "error",
                  "message": "Invalid JSON"
                }

        '404':
          description: Schema not found
